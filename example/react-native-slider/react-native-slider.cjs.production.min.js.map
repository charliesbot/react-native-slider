{"version":3,"file":"react-native-slider.cjs.production.min.js","sources":["../../src/components/Slider/Slider.style.ts","../../src/components/ThumbImage/ThumbImage.tsx","../../src/utils/Rect.ts","../../src/constants/animationConfig.ts","../../src/utils/helper.ts","../../src/components/DebugThumbTouchRect/DebugThumbTouchRect.tsx","../../src/components/Slider/Slider.tsx"],"sourcesContent":["import { StyleSheet } from \"react-native\";\n\nconst TRACK_SIZE = 4;\nconst THUMB_SIZE = 20;\n\nconst defaultStyles = StyleSheet.create({\n  container: {\n    height: 40,\n    justifyContent: \"center\",\n  },\n  track: {\n    height: TRACK_SIZE,\n    borderRadius: TRACK_SIZE / 2,\n  },\n  thumb: {\n    position: \"absolute\",\n    width: THUMB_SIZE,\n    height: THUMB_SIZE,\n    borderRadius: THUMB_SIZE / 2,\n  },\n  touchArea: {\n    position: \"absolute\",\n    backgroundColor: \"transparent\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n  debugThumbTouchArea: {\n    position: \"absolute\",\n    backgroundColor: \"green\",\n    opacity: 0.5,\n  },\n});\n\nexport { defaultStyles };\n","import React from \"react\";\nimport { Image } from \"react-native\";\nimport { SliderProps } from \"../Slider/Slider.type\";\n\nconst ThumbImage: React.FC<Pick<SliderProps, \"thumbImage\">> = props => {\n  const { thumbImage } = props;\n\n  if (!thumbImage) {\n    return null;\n  }\n\n  return <Image source={thumbImage} />;\n};\n\nexport { ThumbImage };\n","type Args = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n};\n\nclass Rect {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n\n  constructor({ x, y, width, height }: Args) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  containsPoint({ x, y }: Pick<Args, \"x\" | \"y\">) {\n    return (\n      x >= this.x &&\n      y >= this.y &&\n      x <= this.x + this.width &&\n      y <= this.y + this.height\n    );\n  }\n}\n\nexport { Rect };\n","import { Easing } from \"react-native\";\n\nexport const DEFAULT_ANIMATION_CONFIGS = {\n  spring: {\n    friction: 7,\n    tension: 100,\n  },\n  timing: {\n    duration: 150,\n    easing: Easing.inOut(Easing.ease),\n    delay: 0,\n  },\n};\n","import { Animated } from \"react-native\";\nimport { SliderProps } from \"../components/Slider/Slider.type\";\nimport { DEFAULT_ANIMATION_CONFIGS } from \"../constants/animationConfig\";\n\nexport const setCurrentValue = (\n  currentValue: Animated.Value,\n  value: number\n) => {\n  currentValue.setValue(value);\n};\n\ntype SetCurrentValueAnimatedArgs = Pick<\n  SliderProps,\n  \"value\" | \"animationType\" | \"animationConfig\"\n> & {\n  currentValue: Animated.Value;\n};\n\nexport const setCurrentValueAnimated = (args: SetCurrentValueAnimatedArgs) => {\n  const { value, animationType, animationConfig, currentValue } = args;\n\n  const customAnimationConfig = {\n    ...DEFAULT_ANIMATION_CONFIGS[animationType],\n    ...animationConfig,\n    toValue: value,\n  };\n\n  Animated[animationType](currentValue, customAnimationConfig).start();\n};\n\nexport const getCurrentValue = (currentValue: Animated.Value) =>\n  (currentValue as any).__getValue();\n","import React from \"react\";\nimport { Animated } from \"react-native\";\nimport { SliderProps } from \"../Slider/Slider.type\";\nimport { Rect } from \"../../utils/Rect\";\nimport { defaultStyles } from \"../Slider/Slider.style\";\n\ntype DebugThumbTouchRectProps = Pick<SliderProps, \"debugTouchArea\"> & {\n  thumbLeft: Animated.AnimatedInterpolation;\n  thumbTouchRect: Rect | undefined;\n};\n\nconst DebugThumbTouchRect: React.FC<DebugThumbTouchRectProps> = props => {\n  const { debugTouchArea, thumbLeft, thumbTouchRect } = props;\n  if (!debugTouchArea || !thumbTouchRect) {\n    return null;\n  }\n\n  const positionStyle = {\n    left: thumbLeft,\n    top: thumbTouchRect.y,\n    width: thumbTouchRect.width,\n    height: thumbTouchRect.height,\n  };\n\n  return (\n    <Animated.View\n      style={[defaultStyles.debugThumbTouchArea, positionStyle]}\n      pointerEvents=\"none\"\n    />\n  );\n};\n\nexport { DebugThumbTouchRect };\n","import React, { useState, useEffect, useRef } from \"react\";\n\nimport {\n  Animated,\n  PanResponder,\n  View,\n  I18nManager,\n  GestureResponderEvent,\n  PanResponderGestureState,\n  PanResponderCallbacks,\n  LayoutChangeEvent,\n  PanResponderInstance,\n} from \"react-native\";\nimport { SliderProps, SliderPropsEvents, LayoutEvent } from \"./Slider.type\";\nimport { defaultStyles } from \"./Slider.style\";\nimport { ThumbImage } from \"../ThumbImage/ThumbImage\";\nimport { Rect } from \"../../utils/Rect\";\nimport { getCurrentValue, setCurrentValueAnimated } from \"../../utils/helper\";\nimport { DebugThumbTouchRect } from \"../DebugThumbTouchRect/DebugThumbTouchRect\";\n\nconst initialState = {\n  width: 0,\n  height: 0,\n};\n\nconst sizes: {\n  [key: string]: {\n    width: number;\n    height: number;\n  };\n} = {};\n\nconst Slider: React.FC<SliderProps> = props => {\n  let panResponder = useRef<PanResponderInstance | null>(null);\n\n  const {\n    animationConfig,\n    animateTransitions,\n    animationType = \"timing\",\n    debugTouchArea = false,\n    maximumTrackTintColor = \"#b3b3b3\",\n    maximumValue = 1,\n    minimumTrackTintColor = \"#3f3f3f\",\n    minimumValue = 0,\n    step = 0,\n    styles,\n    style,\n    thumbImage,\n    thumbStyle,\n    thumbTintColor = \"#343434\",\n    thumbTouchSize = { width: 40, height: 40 },\n    trackStyle,\n    value = 0,\n    disabled,\n  } = props;\n\n  let previousLeft: any;\n  const [containerSize, setContainerSize] = useState(initialState);\n  const [, setTrackSize] = useState(initialState);\n  const [thumbSize, setThumbSize] = useState(initialState);\n  const [allMeasured, setAllMeasured] = useState(false);\n  const [currentValue, setCurrentValue] = useState(new Animated.Value(value));\n\n  useEffect(() => {\n    panResponder.current = PanResponder.create({\n      onStartShouldSetPanResponder: handleStartShouldSetPanResponder,\n      onMoveShouldSetPanResponder: handleMoveShouldSetPanResponder,\n      onPanResponderGrant: handlePanResponderGrant,\n      onPanResponderMove: handlePanResponderMove,\n      onPanResponderRelease: handlePanResponderEnd,\n      onPanResponderTerminationRequest: handlePanResponderRequestEnd,\n      onPanResponderTerminate: handlePanResponderEnd,\n    });\n  }, []);\n\n  useEffect(() => {\n    if (animateTransitions) {\n      setCurrentValueAnimated({\n        value,\n        currentValue,\n        animationConfig,\n        animationType,\n      });\n    } else {\n      setCurrentValue(new Animated.Value(value));\n    }\n  }, [value]);\n\n  const mainStyles = styles || defaultStyles;\n  const thumbLeft = currentValue.interpolate({\n    inputRange: [minimumValue, maximumValue],\n    outputRange: I18nManager.isRTL\n      ? [0, -(containerSize.width - thumbSize.width)]\n      : [0, containerSize.width - thumbSize.width],\n  });\n\n  const getValue = (gestureState: PanResponderGestureState) => {\n    const thumbLeft = previousLeft + gestureState.dx;\n\n    const nonRtlRatio = thumbLeft / length;\n    const ratio = I18nManager.isRTL ? 1 - nonRtlRatio : nonRtlRatio;\n\n    if (step) {\n      return Math.max(\n        minimumValue,\n        Math.min(\n          maximumValue,\n          minimumValue +\n            Math.round((ratio * (maximumValue - minimumValue)) / step) * step\n        )\n      );\n    }\n    return Math.max(\n      minimumValue,\n      Math.min(\n        maximumValue,\n        ratio * (maximumValue - minimumValue) + minimumValue\n      )\n    );\n  };\n\n  const handlePanResponderMove: PanResponderCallbacks[\"onPanResponderMove\"] = (\n    _,\n    gestureState\n  ) => {\n    if (disabled) {\n      return;\n    }\n\n    setCurrentValue(new Animated.Value(getValue(gestureState)));\n    fireChangeEvent(\"onValueChange\");\n  };\n\n  const handlePanResponderRequestEnd: PanResponderCallbacks[\"onPanResponderTerminationRequest\"] = () => {\n    // Should we allow another component to take over this pan?\n    return false;\n  };\n\n  const handlePanResponderEnd: PanResponderCallbacks[\"onPanResponderEnd\"] = (\n    _,\n    gestureState\n  ) => {\n    if (disabled) {\n      return;\n    }\n\n    setCurrentValue(new Animated.Value(getValue(gestureState)));\n    fireChangeEvent(\"onSlidingComplete\");\n  };\n\n  const handleMeasure = (name: LayoutEvent, x: LayoutChangeEvent) => {\n    const { width, height } = x.nativeEvent.layout;\n    const size = { width, height };\n\n    const currentSize = sizes[name];\n    if (\n      currentSize &&\n      width === currentSize.width &&\n      height === currentSize.height\n    ) {\n      return;\n    }\n\n    sizes[name] = size;\n\n    if (sizes.containerSize && sizes.trackSize && sizes.thumbSize) {\n      setContainerSize(sizes.containerSize);\n      setTrackSize(sizes.trackSize);\n      setThumbSize(sizes.thumbSize);\n      setAllMeasured(true);\n    }\n  };\n\n  const onLayoutChange = (eventName: LayoutEvent) => (\n    event: LayoutChangeEvent\n  ) => handleMeasure(eventName, event);\n\n  const measureContainer = onLayoutChange(\"containerSize\");\n\n  const measureTrack = onLayoutChange(\"trackSize\");\n\n  const measureThumb = onLayoutChange(\"thumbSize\");\n\n  const minimumTrackWidth = currentValue.interpolate({\n    inputRange: [minimumValue, maximumValue],\n    outputRange: [0, containerSize.width - thumbSize.width],\n  });\n\n  const fireChangeEvent = (event: SliderPropsEvents) => {\n    props[event]?.(getCurrentValue(currentValue));\n  };\n\n  const handlePanResponderGrant = () => {\n    previousLeft = getThumbLeft(getCurrentValue(currentValue));\n    fireChangeEvent(\"onSlidingStart\");\n  };\n\n  const getTouchOverflowSize = () => {\n    const size: { width?: number; height?: number } = {};\n    if (allMeasured) {\n      size.width = Math.max(0, thumbTouchSize.width - thumbSize.width);\n      size.height = Math.max(0, thumbTouchSize.height - containerSize.height);\n    }\n\n    return size;\n  };\n\n  const getTouchOverflowStyle = () => {\n    const { width, height } = getTouchOverflowSize();\n\n    const touchOverflowStyle: {\n      backgroundColor?: string;\n      marginBottom?: number;\n      marginLeft?: number;\n      marginRight?: number;\n      marginTop?: number;\n      opacity?: number;\n    } = {};\n\n    if (width !== undefined && height !== undefined) {\n      const verticalMargin = -height / 2;\n      touchOverflowStyle.marginTop = verticalMargin;\n      touchOverflowStyle.marginBottom = verticalMargin;\n\n      const horizontalMargin = -width / 2;\n      touchOverflowStyle.marginLeft = horizontalMargin;\n      touchOverflowStyle.marginRight = horizontalMargin;\n    }\n\n    if (debugTouchArea) {\n      touchOverflowStyle.backgroundColor = \"orange\";\n      touchOverflowStyle.opacity = 0.5;\n    }\n\n    return touchOverflowStyle;\n  };\n\n  const getRatio = (value: number) =>\n    (value - minimumValue) / (maximumValue - minimumValue);\n\n  const getThumbLeft = (value: number) => {\n    const nonRtlRatio = getRatio(value);\n    const ratio = I18nManager.isRTL ? 1 - nonRtlRatio : nonRtlRatio;\n    return ratio * (containerSize.width - thumbSize.width);\n  };\n\n  const handleStartShouldSetPanResponder = (\n    e: GestureResponderEvent\n  ): boolean => {\n    // Should we become active when the user presses down on the thumb?\n    const nativeEvent = e.nativeEvent;\n    const thumbTouchRect = getThumbTouchRect();\n    return (\n      thumbTouchRect?.containsPoint({\n        x: nativeEvent.locationX,\n        y: nativeEvent.locationY,\n      }) ?? false\n    );\n  };\n\n  const handleMoveShouldSetPanResponder = () => {\n    // Should we become active when the user moves a touch over the thumb?\n    return false;\n  };\n\n  const getThumbTouchRect = () => {\n    const touchOverflowSize = getTouchOverflowSize();\n\n    if (!touchOverflowSize.width || !touchOverflowSize.height) {\n      return;\n    }\n\n    return new Rect({\n      x:\n        touchOverflowSize.width / 2 +\n        getThumbLeft(getCurrentValue(currentValue)) +\n        (thumbSize.width - thumbTouchSize.width) / 2,\n      y:\n        touchOverflowSize.height / 2 +\n        (containerSize.height - thumbTouchSize.height) / 2,\n      width: thumbTouchSize.width,\n      height: thumbTouchSize.height,\n    });\n  };\n\n  const valueVisibleStyle: { opacity?: number } = {};\n\n  if (!allMeasured) {\n    valueVisibleStyle.opacity = 0;\n  }\n\n  const minimumTrackStyle = {\n    position: \"absolute\",\n    width: Animated.add(minimumTrackWidth, thumbSize.width / 2),\n    backgroundColor: minimumTrackTintColor,\n    ...valueVisibleStyle,\n  };\n\n  const touchOverflowStyle = getTouchOverflowStyle();\n\n  return (\n    <View\n      {...props}\n      style={[mainStyles.container, style]}\n      onLayout={measureContainer}\n    >\n      <View\n        style={[\n          { backgroundColor: maximumTrackTintColor },\n          mainStyles.track,\n          trackStyle,\n        ]}\n        renderToHardwareTextureAndroid\n        onLayout={measureTrack}\n      />\n      <Animated.View\n        renderToHardwareTextureAndroid\n        style={[mainStyles.track, trackStyle, minimumTrackStyle]}\n      />\n      <Animated.View\n        onLayout={measureThumb}\n        renderToHardwareTextureAndroid\n        style={[\n          { backgroundColor: thumbTintColor },\n          mainStyles.thumb,\n          thumbStyle,\n          {\n            transform: [{ translateX: thumbLeft }, { translateY: 0 }],\n            ...valueVisibleStyle,\n          },\n        ]}\n      >\n        <ThumbImage thumbImage={thumbImage} />\n      </Animated.View>\n      <View\n        renderToHardwareTextureAndroid\n        style={[defaultStyles.touchArea, touchOverflowStyle]}\n        {...panResponder.current?.panHandlers}\n      >\n        <DebugThumbTouchRect\n          debugTouchArea={debugTouchArea}\n          thumbLeft={minimumTrackWidth}\n          thumbTouchRect={getThumbTouchRect()}\n        />\n      </View>\n    </View>\n  );\n};\n\nexport default React.memo(Slider);\n"],"names":["defaultStyles","StyleSheet","create","container","height","justifyContent","track","borderRadius","TRACK_SIZE","thumb","position","width","THUMB_SIZE","touchArea","backgroundColor","top","left","right","bottom","debugThumbTouchArea","opacity","ThumbImage","props","thumbImage","React","Image","source","Rect","y","x","containsPoint","this","DEFAULT_ANIMATION_CONFIGS","spring","friction","tension","timing","duration","easing","Easing","inOut","ease","delay","getCurrentValue","currentValue","__getValue","DebugThumbTouchRect","thumbTouchRect","debugTouchArea","Animated","View","style","thumbLeft","pointerEvents","initialState","sizes","Slider","previousLeft","panResponder","useRef","animationConfig","animateTransitions","animationType","maximumTrackTintColor","maximumValue","minimumTrackTintColor","minimumValue","step","styles","thumbStyle","thumbTintColor","thumbTouchSize","trackStyle","value","disabled","useState","containerSize","setContainerSize","setTrackSize","thumbSize","setThumbSize","allMeasured","setAllMeasured","Value","setCurrentValue","useEffect","current","PanResponder","onStartShouldSetPanResponder","handleStartShouldSetPanResponder","onMoveShouldSetPanResponder","handleMoveShouldSetPanResponder","onPanResponderGrant","handlePanResponderGrant","onPanResponderMove","handlePanResponderMove","onPanResponderRelease","handlePanResponderEnd","onPanResponderTerminationRequest","handlePanResponderRequestEnd","onPanResponderTerminate","args","customAnimationConfig","toValue","start","setCurrentValueAnimated","mainStyles","interpolate","inputRange","outputRange","I18nManager","isRTL","getValue","gestureState","nonRtlRatio","dx","length","ratio","Math","max","min","round","_","fireChangeEvent","onLayoutChange","eventName","event","nativeEvent","layout","currentSize","name","trackSize","measureContainer","measureTrack","measureThumb","minimumTrackWidth","getThumbLeft","getTouchOverflowSize","size","getRatio","e","getThumbTouchRect","locationX","locationY","touchOverflowSize","valueVisibleStyle","minimumTrackStyle","add","touchOverflowStyle","undefined","verticalMargin","marginTop","marginBottom","horizontalMargin","marginLeft","marginRight","getTouchOverflowStyle","onLayout","renderToHardwareTextureAndroid","transform","translateX","translateY","_panResponder$current","panHandlers","memo"],"mappings":"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"}