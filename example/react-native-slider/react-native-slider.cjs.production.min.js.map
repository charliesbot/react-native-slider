{"version":3,"file":"react-native-slider.cjs.production.min.js","sources":["../../src/components/Slider/Slider.style.ts","../../src/components/ThumbImage/ThumbImage.tsx","../../src/utils/Rect.ts","../../src/constants/animationConfig.ts","../../src/utils/helper.ts","../../src/components/Slider/Slider.tsx"],"sourcesContent":["import { StyleSheet } from \"react-native\";\n\nconst TRACK_SIZE = 4;\nconst THUMB_SIZE = 20;\n\nconst defaultStyles = StyleSheet.create({\n  container: {\n    height: 40,\n    justifyContent: \"center\",\n  },\n  track: {\n    height: TRACK_SIZE,\n    borderRadius: TRACK_SIZE / 2,\n  },\n  thumb: {\n    position: \"absolute\",\n    width: THUMB_SIZE,\n    height: THUMB_SIZE,\n    borderRadius: THUMB_SIZE / 2,\n  },\n  touchArea: {\n    position: \"absolute\",\n    backgroundColor: \"transparent\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n  debugThumbTouchArea: {\n    position: \"absolute\",\n    backgroundColor: \"green\",\n    opacity: 0.5,\n  },\n});\n\nexport { defaultStyles };\n","import React from \"react\";\nimport { Image } from \"react-native\";\nimport { SliderProps } from \"../Slider/Slider.type\";\n\nconst ThumbImage: React.FC<Pick<SliderProps, \"thumbImage\">> = props => {\n  const { thumbImage } = props;\n\n  if (!thumbImage) {\n    return null;\n  }\n\n  return <Image source={thumbImage} />;\n};\n\nexport { ThumbImage };\n","type Args = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n};\n\nclass Rect {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n\n  constructor({ x, y, width, height }: Args) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  containsPoint({ x, y }: Pick<Args, \"x\" | \"y\">) {\n    return (\n      x >= this.x &&\n      y >= this.y &&\n      x <= this.x + this.width &&\n      y <= this.y + this.height\n    );\n  }\n}\n\nexport { Rect };\n","import { Easing } from \"react-native\";\n\nexport const DEFAULT_ANIMATION_CONFIGS = {\n  spring: {\n    friction: 7,\n    tension: 100,\n  },\n  timing: {\n    duration: 150,\n    easing: Easing.inOut(Easing.ease),\n    delay: 0,\n  },\n};\n","import { Animated } from \"react-native\";\nimport { SliderProps } from \"../components/Slider/Slider.type\";\nimport { DEFAULT_ANIMATION_CONFIGS } from \"../constants/animationConfig\";\n\nexport const setCurrentValue = (\n  currentValue: Animated.Value,\n  value: number\n) => {\n  currentValue.setValue(value);\n};\n\ntype SetCurrentValueAnimatedArgs = Pick<\n  SliderProps,\n  \"value\" | \"animationType\" | \"animationConfig\"\n> & {\n  currentValue: Animated.Value;\n};\n\nexport const setCurrentValueAnimated = (args: SetCurrentValueAnimatedArgs) => {\n  const { value, animationType, animationConfig, currentValue } = args;\n\n  const customAnimationConfig = {\n    ...DEFAULT_ANIMATION_CONFIGS[animationType],\n    ...animationConfig,\n    toValue: value,\n  };\n\n  Animated[animationType](currentValue, customAnimationConfig).start();\n};\n\nexport const getCurrentValue = (currentValue: Animated.Value) =>\n  (currentValue as any).__getValue();\n","import React, { useState, useEffect, useRef } from \"react\";\n\nimport {\n  Animated,\n  PanResponder,\n  View,\n  I18nManager,\n  GestureResponderEvent,\n  PanResponderGestureState,\n  PanResponderCallbacks,\n  LayoutChangeEvent,\n  PanResponderInstance,\n} from \"react-native\";\nimport { SliderProps, SliderPropsEvents, LayoutEvent } from \"./Slider.type\";\nimport { defaultStyles } from \"./Slider.style\";\nimport { ThumbImage } from \"../ThumbImage/ThumbImage\";\nimport { Rect } from \"../../utils/Rect\";\nimport { getCurrentValue, setCurrentValueAnimated } from \"../../utils/helper\";\nimport { DebugThumbTouchRect } from \"components/DebugThumbTouchRect/DebugThumbTouchRect\";\n\nconst initialState = {\n  width: 0,\n  height: 0,\n};\n\nconst sizes: {\n  [key: string]: {\n    width: number;\n    height: number;\n  };\n} = {};\n\nconst Slider: React.FC<SliderProps> = props => {\n  let panResponder = useRef<PanResponderInstance | null>(null);\n\n  const {\n    animationConfig,\n    animateTransitions,\n    animationType = \"timing\",\n    debugTouchArea = false,\n    maximumTrackTintColor = \"#b3b3b3\",\n    maximumValue = 1,\n    minimumTrackTintColor = \"#3f3f3f\",\n    minimumValue = 0,\n    step = 0,\n    styles,\n    style,\n    thumbImage,\n    thumbStyle,\n    thumbTintColor = \"#343434\",\n    thumbTouchSize = { width: 40, height: 40 },\n    trackStyle,\n    value = 0,\n    disabled,\n  } = props;\n\n  let previousLeft: any;\n  const [containerSize, setContainerSize] = useState(initialState);\n  const [, setTrackSize] = useState(initialState);\n  const [thumbSize, setThumbSize] = useState(initialState);\n  const [allMeasured, setAllMeasured] = useState(false);\n  const [currentValue, setCurrentValue] = useState(new Animated.Value(value));\n\n  useEffect(() => {\n    panResponder.current = PanResponder.create({\n      onStartShouldSetPanResponder: handleStartShouldSetPanResponder,\n      onMoveShouldSetPanResponder: handleMoveShouldSetPanResponder,\n      onPanResponderGrant: handlePanResponderGrant,\n      onPanResponderMove: handlePanResponderMove,\n      onPanResponderRelease: handlePanResponderEnd,\n      onPanResponderTerminationRequest: handlePanResponderRequestEnd,\n      onPanResponderTerminate: handlePanResponderEnd,\n    });\n  }, []);\n\n  useEffect(() => {\n    if (animateTransitions) {\n      setCurrentValueAnimated({\n        value,\n        currentValue,\n        animationConfig,\n        animationType,\n      });\n    } else {\n      setCurrentValue(new Animated.Value(value));\n    }\n  }, [value]);\n\n  const mainStyles = styles || defaultStyles;\n  const thumbLeft = currentValue.interpolate({\n    inputRange: [minimumValue, maximumValue],\n    outputRange: I18nManager.isRTL\n      ? [0, -(containerSize.width - thumbSize.width)]\n      : [0, containerSize.width - thumbSize.width],\n  });\n\n  const getValue = (gestureState: PanResponderGestureState) => {\n    const thumbLeft = previousLeft + gestureState.dx;\n\n    const nonRtlRatio = thumbLeft / length;\n    const ratio = I18nManager.isRTL ? 1 - nonRtlRatio : nonRtlRatio;\n\n    if (step) {\n      return Math.max(\n        minimumValue,\n        Math.min(\n          maximumValue,\n          minimumValue +\n            Math.round((ratio * (maximumValue - minimumValue)) / step) * step\n        )\n      );\n    }\n    return Math.max(\n      minimumValue,\n      Math.min(\n        maximumValue,\n        ratio * (maximumValue - minimumValue) + minimumValue\n      )\n    );\n  };\n\n  const handlePanResponderMove: PanResponderCallbacks[\"onPanResponderMove\"] = (\n    _,\n    gestureState\n  ) => {\n    if (disabled) {\n      return;\n    }\n\n    setCurrentValue(new Animated.Value(getValue(gestureState)));\n    fireChangeEvent(\"onValueChange\");\n  };\n\n  const handlePanResponderRequestEnd: PanResponderCallbacks[\"onPanResponderTerminationRequest\"] = () => {\n    // Should we allow another component to take over this pan?\n    return false;\n  };\n\n  const handlePanResponderEnd: PanResponderCallbacks[\"onPanResponderEnd\"] = (\n    _,\n    gestureState\n  ) => {\n    if (disabled) {\n      return;\n    }\n\n    setCurrentValue(new Animated.Value(getValue(gestureState)));\n    fireChangeEvent(\"onSlidingComplete\");\n  };\n\n  const handleMeasure = (name: LayoutEvent, x: LayoutChangeEvent) => {\n    const { width, height } = x.nativeEvent.layout;\n    const size = { width, height };\n\n    const currentSize = sizes[name];\n    if (\n      currentSize &&\n      width === currentSize.width &&\n      height === currentSize.height\n    ) {\n      return;\n    }\n\n    sizes[name] = size;\n\n    if (sizes.containerSize && sizes.trackSize && sizes.thumbSize) {\n      setContainerSize(sizes.containerSize);\n      setTrackSize(sizes.trackSize);\n      setThumbSize(sizes.thumbSize);\n      setAllMeasured(true);\n    }\n  };\n\n  const onLayoutChange = (eventName: LayoutEvent) => (\n    event: LayoutChangeEvent\n  ) => handleMeasure(eventName, event);\n\n  const measureContainer = onLayoutChange(\"containerSize\");\n\n  const measureTrack = onLayoutChange(\"trackSize\");\n\n  const measureThumb = onLayoutChange(\"thumbSize\");\n\n  const minimumTrackWidth = currentValue.interpolate({\n    inputRange: [minimumValue, maximumValue],\n    outputRange: [0, containerSize.width - thumbSize.width],\n  });\n\n  const fireChangeEvent = (event: SliderPropsEvents) => {\n    props[event]?.(getCurrentValue(currentValue));\n  };\n\n  const handlePanResponderGrant = () => {\n    previousLeft = getThumbLeft(getCurrentValue(currentValue));\n    fireChangeEvent(\"onSlidingStart\");\n  };\n\n  const getTouchOverflowSize = () => {\n    const size: { width?: number; height?: number } = {};\n    if (allMeasured) {\n      size.width = Math.max(0, thumbTouchSize.width - thumbSize.width);\n      size.height = Math.max(0, thumbTouchSize.height - containerSize.height);\n    }\n\n    return size;\n  };\n\n  const getTouchOverflowStyle = () => {\n    const { width, height } = getTouchOverflowSize();\n\n    const touchOverflowStyle: {\n      backgroundColor?: string;\n      marginBottom?: number;\n      marginLeft?: number;\n      marginRight?: number;\n      marginTop?: number;\n      opacity?: number;\n    } = {};\n\n    if (width !== undefined && height !== undefined) {\n      const verticalMargin = -height / 2;\n      touchOverflowStyle.marginTop = verticalMargin;\n      touchOverflowStyle.marginBottom = verticalMargin;\n\n      const horizontalMargin = -width / 2;\n      touchOverflowStyle.marginLeft = horizontalMargin;\n      touchOverflowStyle.marginRight = horizontalMargin;\n    }\n\n    if (debugTouchArea) {\n      touchOverflowStyle.backgroundColor = \"orange\";\n      touchOverflowStyle.opacity = 0.5;\n    }\n\n    return touchOverflowStyle;\n  };\n\n  const getRatio = (value: number) =>\n    (value - minimumValue) / (maximumValue - minimumValue);\n\n  const getThumbLeft = (value: number) => {\n    const nonRtlRatio = getRatio(value);\n    const ratio = I18nManager.isRTL ? 1 - nonRtlRatio : nonRtlRatio;\n    return ratio * (containerSize.width - thumbSize.width);\n  };\n\n  const handleStartShouldSetPanResponder = (\n    e: GestureResponderEvent\n  ): boolean => {\n    // Should we become active when the user presses down on the thumb?\n    const nativeEvent = e.nativeEvent;\n    const thumbTouchRect = getThumbTouchRect();\n    return (\n      thumbTouchRect?.containsPoint({\n        x: nativeEvent.locationX,\n        y: nativeEvent.locationY,\n      }) ?? false\n    );\n  };\n\n  const handleMoveShouldSetPanResponder = () => {\n    // Should we become active when the user moves a touch over the thumb?\n    return false;\n  };\n\n  const getThumbTouchRect = () => {\n    const touchOverflowSize = getTouchOverflowSize();\n\n    if (!touchOverflowSize.width || !touchOverflowSize.height) {\n      return;\n    }\n\n    return new Rect({\n      x:\n        touchOverflowSize.width / 2 +\n        getThumbLeft(getCurrentValue(currentValue)) +\n        (thumbSize.width - thumbTouchSize.width) / 2,\n      y:\n        touchOverflowSize.height / 2 +\n        (containerSize.height - thumbTouchSize.height) / 2,\n      width: thumbTouchSize.width,\n      height: thumbTouchSize.height,\n    });\n  };\n\n  const valueVisibleStyle: { opacity?: number } = {};\n\n  if (!allMeasured) {\n    valueVisibleStyle.opacity = 0;\n  }\n\n  const minimumTrackStyle = {\n    position: \"absolute\",\n    width: Animated.add(minimumTrackWidth, thumbSize.width / 2),\n    backgroundColor: minimumTrackTintColor,\n    ...valueVisibleStyle,\n  };\n\n  const touchOverflowStyle = getTouchOverflowStyle();\n\n  return (\n    <View\n      {...props}\n      style={[mainStyles.container, style]}\n      onLayout={measureContainer}\n    >\n      <View\n        style={[\n          { backgroundColor: maximumTrackTintColor },\n          mainStyles.track,\n          trackStyle,\n        ]}\n        renderToHardwareTextureAndroid\n        onLayout={measureTrack}\n      />\n      <Animated.View\n        renderToHardwareTextureAndroid\n        style={[mainStyles.track, trackStyle, minimumTrackStyle]}\n      />\n      <Animated.View\n        onLayout={measureThumb}\n        renderToHardwareTextureAndroid\n        style={[\n          { backgroundColor: thumbTintColor },\n          mainStyles.thumb,\n          thumbStyle,\n          {\n            transform: [{ translateX: thumbLeft }, { translateY: 0 }],\n            ...valueVisibleStyle,\n          },\n        ]}\n      >\n        <ThumbImage thumbImage={thumbImage} />\n      </Animated.View>\n      <View\n        renderToHardwareTextureAndroid\n        style={[defaultStyles.touchArea, touchOverflowStyle]}\n        {...panResponder.current?.panHandlers}\n      >\n        <DebugThumbTouchRect\n          debugTouchArea={debugTouchArea}\n          thumbLeft={minimumTrackWidth}\n          thumbTouchRect={getThumbTouchRect()}\n        />\n      </View>\n    </View>\n  );\n};\n\nexport default React.memo(Slider);\n"],"names":["defaultStyles","StyleSheet","create","container","height","justifyContent","track","borderRadius","TRACK_SIZE","thumb","position","width","THUMB_SIZE","touchArea","backgroundColor","top","left","right","bottom","debugThumbTouchArea","opacity","ThumbImage","props","thumbImage","React","Image","source","Rect","y","x","containsPoint","this","DEFAULT_ANIMATION_CONFIGS","spring","friction","tension","timing","duration","easing","Easing","inOut","ease","delay","getCurrentValue","currentValue","__getValue","initialState","sizes","Slider","previousLeft","panResponder","useRef","animationConfig","animateTransitions","animationType","debugTouchArea","maximumTrackTintColor","maximumValue","minimumTrackTintColor","minimumValue","step","styles","style","thumbStyle","thumbTintColor","thumbTouchSize","trackStyle","value","disabled","useState","containerSize","setContainerSize","setTrackSize","thumbSize","setThumbSize","allMeasured","setAllMeasured","Animated","Value","setCurrentValue","useEffect","current","PanResponder","onStartShouldSetPanResponder","handleStartShouldSetPanResponder","onMoveShouldSetPanResponder","handleMoveShouldSetPanResponder","onPanResponderGrant","handlePanResponderGrant","onPanResponderMove","handlePanResponderMove","onPanResponderRelease","handlePanResponderEnd","onPanResponderTerminationRequest","handlePanResponderRequestEnd","onPanResponderTerminate","args","customAnimationConfig","toValue","start","setCurrentValueAnimated","mainStyles","thumbLeft","interpolate","inputRange","outputRange","I18nManager","isRTL","getValue","gestureState","nonRtlRatio","dx","length","ratio","Math","max","min","round","_","fireChangeEvent","onLayoutChange","eventName","event","nativeEvent","layout","currentSize","name","trackSize","measureContainer","measureTrack","measureThumb","minimumTrackWidth","getThumbLeft","getTouchOverflowSize","size","getRatio","e","thumbTouchRect","getThumbTouchRect","locationX","locationY","touchOverflowSize","valueVisibleStyle","minimumTrackStyle","add","touchOverflowStyle","undefined","verticalMargin","marginTop","marginBottom","horizontalMargin","marginLeft","marginRight","getTouchOverflowStyle","View","onLayout","renderToHardwareTextureAndroid","transform","translateX","translateY","_panResponder$current","panHandlers","DebugThumbTouchRect","memo"],"mappings":"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"}